;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Cum Mar 11 2016
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================

; 0208h 0000001000001000
; 020AH 0000001000001010 A1

STAK    SEGMENT PARA STACK 'STACK'
        DW 20 DUP(?)
STAK    ENDS

DATA    SEGMENT PARA 'DATA'
SAFAK DB  053H, 041H, 046H, 041H, 04BH ;ben
lensafak DB  5                         
DATA    ENDS

CODE    SEGMENT PARA 'CODE'
        ASSUME CS:CODE, DS:DATA, SS:STAK
START:
    MOV AX, DATA
    MOV DS, AX
    
    ; MOD YAZMACINA ERİŞİM
    MOV DX, 020Ah         ; mod yazmacının adresini DX'e al
    MOV AL, 01001101B     ; son iki bitinin 00'dan farklı olması gerekiyor
                          ; 00 olursa baud rate factor senkron haberleşme modu oluyor. Biz asenkron istiyoruz
     ; sync1 ve sync2 bekliyor 00 senkron yaparsak. Diğer değerler şu an önemli değil.
    OUT DX, AL           ; mod yazmacının adresine (DX) 01001101 değerini (AL) yükle.

    ; KONTROL YAZMACINA ERİŞİM
    MOV AL, 40H           ; ikinci out işlemimiz kontrol yazmacına gidecek (01000000) 1: internal reset
    OUT DX, AL            ; 8255 resetlendi (uygun yazma işlemini yapabiliriz artık)

    ; MOD YAZMACINA ERİŞİM
    MOV AL, 01001101B     ;asenkron haberleşme ve faktör değeri: (d1d0) 01: rxc (9600hz) ve txc (9600hz) değerler ne ise 1'e böl
     ; -> 9600 baud'luk haberleşme değerlerini elde etmiş olduk. (virtual terminalin de baud değeri 9600, karşılıklı örtüşür)
    OUT DX, AL            ; (d7d6) 01: stop bit sayım (1) /// (d3d2) 11: 8 bit ile haberleşeceğiz (ascii chars) /// (d5d4) partiy yok

    
    ; KONTROL YAZMACINA ERİŞİM
    MOV AL, 00010101B     ; daha önceden kalan herhangi bir hata biti varsa bunları temizle (d4: 1)
     ; receive enable ve transmit enable (d2:1 ve d0:1 ) -> veri göndereceğiz ve alacağız
    OUT DX, AL            ; kontrol yazmacını yükle


ENDLESS:                  ; sonsuz döngüde sürekli olarak karakter alıp karakter yazıyoruz
    MOV DX, 020AH         ; kontrol ve status yazmaçlarının olduğu adres -> 020AH
                          ; WR -> kontrol yazmacına yaz /// RD -> status yazmacını oku
     
    
TEKRAR:                   ; burada bir sayı giriyoruz
    IN AL, DX             
    AND AL, 02H           ; maskele, status yazmacının en düşük anlamlı 2. bitinde RxRDY ucu var. 1 ise tamamlandı
    JZ TEKRAR             ; 1 olana kadar devam

    MOV DX, 0208H         ; input bu adreste
    IN AL, DX             ; AL'de sayı
    SHR AL, 1             ;!! hatalı !!
    
    XOR AH,AH             ; AL'yi AX üstünden kullanacağımız için XOR AH AH   
    MOV CX,AX             ; iterator register'a AX değerini at

    MOV BL, AL            ; girilen sayı değerini BL'ye al
    MOV DX, 020AH         ; kontrol ve status yazmaçlarının olduğu adres
    
sayi:                     ; SAYI BASTIRMA
    IN AL, DX             
    AND AL, 01H           ; maskele, status yazmacının en düşük anlamlı 1. bitinde TxRDY ucu var. 1 ise tamamlandı
    JZ sayi               ; 1 olana kadar devam
    
    MOV DX, 0208H         ; outputu bu adrese bastır
    MOV AL, BL            ; Aldığımız sayıyı BL'de tutmuştuk şimdi bunu yazdıracağız
    OUT DX, AL
    MOV DX, 020AH
    
    XOR BH,BH             ; BL'de hala sayı var, CX'e atmak için XOR AH AH
    SUB BX, '0'           ; char to integer
    MOV CX,BX             ; CX iterator'ına BX'i at (girilen sayı)
    PUSH CX               ; daha sonra lazım olacak, CX'i push'la
    
    CMP CX,0              ; eğer 0 < CX < 6 koşulu sağlanıyorsa kalanlar yapılır sağlanmazsa interrupt 
    JBE handshake2        ;
    CMP CX, 6             ;
    JAE handshake2        ;
    
    XOR SI, SI
    
whileinput:               ; INPUTU AL
    MOV DX, 020AH         ; kontrol ve status yazmaçlarının olduğu adres
    IN AL, DX
    AND AL, 02H           ; maskele, status yazmacının en düşük anlamlı 2. bitinde RxRDY ucu var. 1 ise tamamlandı
 JZ whileinput         ; 1 olana kadar devam

    MOV DX, 0208H         ; input bu adreste
    IN AL, DX             ; inputu al
    SHR AL, 1             ;!! hatalı !!
    MOV DX, 020AH
    MOV BL, AL            ; bu intputu BL'ye at lazım olacak
    

    CMP SAFAK[SI], BL     ; eğer girilen input doğru değilse interrupt
    JNE handshake2        ;
    INC SI                ;
    
inputi:                   ; INPUTU BASTIR
    MOV DX, 020AH         ; kontrol ve status yazmaçlarının olduğu adres
    IN AL, DX
    AND AL, 01H           ; maskele, status yazmacının en düşük anlamlı 1. bitinde txRDY ucu var. 1 ise tamamlandı
    JZ inputi             ; 1 olana kadar devam
    MOV DX, 0208H
    MOV AL, BL            ; BL'de aldığımız input vardı
    OUT DX, AL            ; bastır 
    MOV DX, 020AH
    
    LOOP whileinput       ; CX (ilk girdiğimiz sayı) sıfırlanana kadar input alma ve yazma işlemini tekarkla
    
    
    POP CX                ; CX (ilk girilen sayı) stack'ten çekilir
    CMP CX, 5             ; 5 ise bu sayı zaten çoktan girilmiştir her şey, programı bitirebiliriz
    JE handshake2         ; programı bitir
    
    MOV SI, CX            ; SI'ya sayıyı at
    MOV BL, lensafak      ; BL'ye şafak'ın uzunluğunu at
    XOR BH,BH             ; BX'te BL'yi tut
    SUB BX, CX            ; BX'ten CX'i çıkar (5 - 3 mesela, 2 den devam ederek kalanları bastır)
    MOV CX, BX
    
kalanwhile:               ; KALANLARI YAZDIRMA
    handshake:
      MOV DX, 020AH       ; kontrol ve status yazmaçlarının olduğu adres
      IN AL, DX
      AND AL, 01H         ; maskele, status yazmacının en düşük anlamlı 1. bitinde txRDY ucu var. 1 ise tamamlandı
      JZ handshake        ; 1 olana kadar
      MOV DX, 0208H
      MOV AL, SAFAK[SI]   ; kalan neyse onu yazdır
      OUT DX, AL
      MOV DX, 020AH
      INC SI              ; SI'yı bir arttır diğer kelimeye geç
      LOOP kalanwhile

handshake2:               ; DASH
      MOV DX, 020AH       
      IN AL, DX
      AND AL, 01H         
      JZ handshake2       
      MOV DX, 0208H
      MOV AL, 02DH
      OUT DX, AL
      MOV DX, 020AH    
      
        JMP ENDLESS
CODE    ENDS
        END START
